"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evalCompiletimeValue = exports.evalRuntimeValues = exports.sanitizeReplacementValues = undefined;

var _termExpander = require("./term-expander");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _immutable = require("immutable");

var _parseReducer = require("./parse-reducer.js");

var _parseReducer2 = _interopRequireDefault(_parseReducer);

var _shiftReducer = require("shift-reducer");

var _shiftReducer2 = _interopRequireDefault(_shiftReducer);

var _serializer = require("./serializer");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _shiftCodegen = require("shift-codegen");

var _shiftCodegen2 = _interopRequireDefault(_shiftCodegen);

var _transforms = require("./transforms");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _macroContext = require("./macro-context");

var _templateProcessor = require("./template-processor");

var _vm = require("vm");

var _vm2 = _interopRequireDefault(_vm);

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let geval_361 = eval;
function sanitizeReplacementValues_362(values_365) {
  if (Array.isArray(values_365)) {
    return sanitizeReplacementValues_362((0, _immutable.List)(values_365));
  } else if (_immutable.List.isList(values_365)) {
    return values_365.map(sanitizeReplacementValues_362);
  } else if (values_365 == null) {
    throw new Error("replacement values for syntax template must not be null or undefined");
  } else if (typeof values_365.next === "function") {
    return sanitizeReplacementValues_362((0, _immutable.List)(values_365));
  }
  return (0, _macroContext.unwrap)(values_365);
}
function evalRuntimeValues_363(terms_366, context_367) {
  let prepped_368 = terms_366.reduce((acc_374, term_375) => {
    let result_376 = (0, _immutable.List)();
    if ((0, _terms.isExport)(term_375)) {
      if ((0, _terms.isVariableDeclaration)(term_375.declaration)) {
        return acc_374.concat(new _terms2.default("VariableDeclarationStatement", { declaration: term_375.declaration })).concat(term_375.declaration.declarators.map(decl_377 => {
          return new _terms2.default("ExpressionStatement", { expression: new _terms2.default("AssignmentExpression", { binding: new _terms2.default("StaticMemberExpression", { object: new _terms2.default("IdentifierExpression", { name: _syntax2.default.fromIdentifier("exports") }), property: decl_377.binding.name }), expression: new _terms2.default("IdentifierExpression", { name: decl_377.binding.name }) }) });
        }));
      }
    } else if ((0, _terms.isImport)(term_375)) {
      return acc_374;
    }
    return acc_374.concat(term_375);
  }, (0, _immutable.List)());
  let parsed_369 = (0, _shiftReducer2.default)(new _parseReducer2.default(context_367, false), new _terms2.default("Module", { directives: (0, _immutable.List)(), items: prepped_368 }).gen({ includeImports: false }));
  let gen_370 = (0, _shiftCodegen2.default)(parsed_369, new _shiftCodegen.FormattedCodeGen());
  let result_371 = context_367.transform(gen_370, { babelrc: true, filename: context_367.filename });
  let exportsObj_372 = {};
  context_367.store.set("exports", exportsObj_372);
  let val_373 = _vm2.default.runInContext(result_371.code, context_367.store.getNodeContext());
  return exportsObj_372;
}
function evalCompiletimeValue_364(expr_378, context_379) {
  let deserializer_380 = (0, _serializer.makeDeserializer)(context_379.bindings);
  let sandbox_381 = { syntaxQuote: function syntaxQuote(strings_389) {
      for (var _len = arguments.length, values_388 = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values_388[_key - 1] = arguments[_key];
      }

      let ctx_390 = deserializer_380.read(_.last(values_388));
      let reader_391 = new _shiftReader2.default(strings_389, ctx_390, _.take(values_388.length - 1, values_388));
      return reader_391.read();
    }, syntaxTemplate: function syntaxTemplate(str_393) {
      for (var _len2 = arguments.length, values_392 = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        values_392[_key2 - 1] = arguments[_key2];
      }

      return (0, _templateProcessor.replaceTemplate)(deserializer_380.read(str_393), sanitizeReplacementValues_362(values_392));
    } };
  let sandboxKeys_382 = (0, _immutable.List)(Object.keys(sandbox_381));
  let sandboxVals_383 = sandboxKeys_382.map(k_394 => sandbox_381[k_394]).toArray();
  let parsed_384 = (0, _shiftReducer2.default)(new _parseReducer2.default(context_379), new _terms2.default("Module", { directives: (0, _immutable.List)(), items: _immutable.List.of(new _terms2.default("ExpressionStatement", { expression: new _terms2.default("FunctionExpression", { isGenerator: false, name: null, params: new _terms2.default("FormalParameters", { items: sandboxKeys_382.map(param_395 => {
            return new _terms2.default("BindingIdentifier", { name: _syntax2.default.from("identifier", param_395) });
          }), rest: null }), body: new _terms2.default("FunctionBody", { directives: _immutable.List.of(new _terms2.default("Directive", { rawValue: "use strict" })), statements: _immutable.List.of(new _terms2.default("ReturnStatement", { expression: expr_378 })) }) }) })) }));
  let gen_385 = (0, _shiftCodegen2.default)(parsed_384, new _shiftCodegen.FormattedCodeGen());
  let result_386 = context_379.transform(gen_385, { babelrc: true, filename: context_379.filename });
  let val_387 = _vm2.default.runInContext(result_386.code, context_379.store.getNodeContext());
  return val_387.apply(undefined, sandboxVals_383);
}
exports.sanitizeReplacementValues = sanitizeReplacementValues_362;
exports.evalRuntimeValues = evalRuntimeValues_363;
exports.evalCompiletimeValue = evalCompiletimeValue_364;
//# sourceMappingURL=data:application/json;base64,