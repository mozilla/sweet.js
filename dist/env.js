"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _transforms = require("./transforms");

class Env {
  constructor() {
    this.map = new Map();
    this.map.set("function", _transforms.FunctionDeclTransform);
    this.map.set("var", _transforms.VariableDeclTransform);
    this.map.set("let", _transforms.LetDeclTransform);
    this.map.set("const", _transforms.ConstDeclTransform);
    this.map.set("syntaxQuote", _transforms.SyntaxQuoteTransform);
    this.map.set("syntaxrec", _transforms.SyntaxrecDeclTransform);
    this.map.set("syntax", _transforms.SyntaxDeclTransform);
    this.map.set("return", _transforms.ReturnStatementTransform);
    this.map.set("while", _transforms.WhileTransform);
    this.map.set("if", _transforms.IfTransform);
    this.map.set("for", _transforms.ForTransform);
    this.map.set("switch", _transforms.SwitchTransform);
    this.map.set("break", _transforms.BreakTransform);
    this.map.set("continue", _transforms.ContinueTransform);
    this.map.set("do", _transforms.DoTransform);
    this.map.set("debugger", _transforms.DebuggerTransform);
    this.map.set("with", _transforms.WithTransform);
    this.map.set("try", _transforms.TryTransform);
    this.map.set("throw", _transforms.ThrowTransform);
    this.map.set("new", _transforms.NewTransform);
  }
  has(key_332) {
    return this.map.has(key_332);
  }
  get(key_333) {
    return this.map.get(key_333);
  }
  set(key_334, val_335) {
    return this.map.set(key_334, val_335);
  }
}
exports.default = Env;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3N3ZWV0L2Vudi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDZSxNQUFNLEdBQU4sQ0FBVTtBQUN2QixnQkFBYztBQUNaLFNBQUssR0FBTCxHQUFXLElBQUksR0FBSixFQUFYO0FBQ0EsU0FBSyxHQUFMLENBQVMsR0FBVCxDQUFhLFVBQWI7QUFDQSxTQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsS0FBYjtBQUNBLFNBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxLQUFiO0FBQ0EsU0FBSyxHQUFMLENBQVMsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsYUFBYjtBQUNBLFNBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxXQUFiO0FBQ0EsU0FBSyxHQUFMLENBQVMsR0FBVCxDQUFhLFFBQWI7QUFDQSxTQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsUUFBYjtBQUNBLFNBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxPQUFiO0FBQ0EsU0FBSyxHQUFMLENBQVMsR0FBVCxDQUFhLElBQWI7QUFDQSxTQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsS0FBYjtBQUNBLFNBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxRQUFiO0FBQ0EsU0FBSyxHQUFMLENBQVMsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsVUFBYjtBQUNBLFNBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxJQUFiO0FBQ0EsU0FBSyxHQUFMLENBQVMsR0FBVCxDQUFhLFVBQWI7QUFDQSxTQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsTUFBYjtBQUNBLFNBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxLQUFiO0FBQ0EsU0FBSyxHQUFMLENBQVMsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsS0FBYjtBQUNEO0FBQ0QsTUFBSSxPQUFKLEVBQWE7QUFDWCxXQUFPLEtBQUssR0FBTCxDQUFTLEdBQVQsQ0FBYSxPQUFiLENBQVA7QUFDRDtBQUNELE1BQUksT0FBSixFQUFhO0FBQ1gsV0FBTyxLQUFLLEdBQUwsQ0FBUyxHQUFULENBQWEsT0FBYixDQUFQO0FBQ0Q7QUFDRCxNQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCO0FBQ3BCLFdBQU8sS0FBSyxHQUFMLENBQVMsR0FBVCxDQUFhLE9BQWIsRUFBc0IsT0FBdEIsQ0FBUDtBQUNEO0FBaENzQjtrQkFBSixHIiwiZmlsZSI6ImVudi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RnVuY3Rpb25EZWNsVHJhbnNmb3JtLCBWYXJpYWJsZURlY2xUcmFuc2Zvcm0sIExldERlY2xUcmFuc2Zvcm0sIENvbnN0RGVjbFRyYW5zZm9ybSwgU3ludGF4RGVjbFRyYW5zZm9ybSwgU3ludGF4cmVjRGVjbFRyYW5zZm9ybSwgU3ludGF4UXVvdGVUcmFuc2Zvcm0sIFJldHVyblN0YXRlbWVudFRyYW5zZm9ybSwgSWZUcmFuc2Zvcm0sIEZvclRyYW5zZm9ybSwgU3dpdGNoVHJhbnNmb3JtLCBCcmVha1RyYW5zZm9ybSwgQ29udGludWVUcmFuc2Zvcm0sIERvVHJhbnNmb3JtLCBEZWJ1Z2dlclRyYW5zZm9ybSwgV2l0aFRyYW5zZm9ybSwgVHJ5VHJhbnNmb3JtLCBUaHJvd1RyYW5zZm9ybSwgTmV3VHJhbnNmb3JtLCBXaGlsZVRyYW5zZm9ybX0gZnJvbSBcIi4vdHJhbnNmb3Jtc1wiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW52IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tYXAgPSBuZXcgTWFwO1xuICAgIHRoaXMubWFwLnNldChcImZ1bmN0aW9uXCIsIEZ1bmN0aW9uRGVjbFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KFwidmFyXCIsIFZhcmlhYmxlRGVjbFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KFwibGV0XCIsIExldERlY2xUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldChcImNvbnN0XCIsIENvbnN0RGVjbFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KFwic3ludGF4UXVvdGVcIiwgU3ludGF4UXVvdGVUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldChcInN5bnRheHJlY1wiLCBTeW50YXhyZWNEZWNsVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoXCJzeW50YXhcIiwgU3ludGF4RGVjbFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KFwicmV0dXJuXCIsIFJldHVyblN0YXRlbWVudFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KFwid2hpbGVcIiwgV2hpbGVUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldChcImlmXCIsIElmVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoXCJmb3JcIiwgRm9yVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoXCJzd2l0Y2hcIiwgU3dpdGNoVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoXCJicmVha1wiLCBCcmVha1RyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KFwiY29udGludWVcIiwgQ29udGludWVUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldChcImRvXCIsIERvVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoXCJkZWJ1Z2dlclwiLCBEZWJ1Z2dlclRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KFwid2l0aFwiLCBXaXRoVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoXCJ0cnlcIiwgVHJ5VHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoXCJ0aHJvd1wiLCBUaHJvd1RyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KFwibmV3XCIsIE5ld1RyYW5zZm9ybSk7XG4gIH1cbiAgaGFzKGtleV8zMzIpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleV8zMzIpO1xuICB9XG4gIGdldChrZXlfMzMzKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXlfMzMzKTtcbiAgfVxuICBzZXQoa2V5XzMzNCwgdmFsXzMzNSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5zZXQoa2V5XzMzNCwgdmFsXzMzNSk7XG4gIH1cbn1cbiJdfQ==