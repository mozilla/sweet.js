"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unwrap = exports.SyntaxOrTermWrapper = undefined;

var _mapSyntaxReducer = require("./map-syntax-reducer");

var _mapSyntaxReducer2 = _interopRequireDefault(_mapSyntaxReducer);

var _shiftReducer = require("shift-reducer");

var _shiftReducer2 = _interopRequireDefault(_shiftReducer);

var _errors = require("./errors");

var _immutable = require("immutable");

var _enforester = require("./enforester");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _ramdaFantasy = require("ramda-fantasy");

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Just_396 = _ramdaFantasy.Maybe.Just;
const Nothing_397 = _ramdaFantasy.Maybe.Nothing;
const symWrap_398 = Symbol("wrapper");
const privateData_399 = new WeakMap();
const getVal_400 = t_405 => {
  if (t_405.match("delimiter")) {
    return null;
  }
  if (typeof t_405.val === "function") {
    return t_405.val();
  }
  return null;
};
class SyntaxOrTermWrapper_401 {
  constructor(s_406) {
    let context_407 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    this[symWrap_398] = s_406;
    this.context = context_407;
  }
  from(type_408, value_409) {
    let stx_410 = this[symWrap_398];
    if (typeof stx_410.from === "function") {
      return stx_410.from(type_408, value_409);
    }
  }
  fromNull() {
    return this.from("null", null);
  }
  fromNumber(value_411) {
    return this.from("number", value_411);
  }
  fromString(value_412) {
    return this.from("string", value_412);
  }
  fromPunctuator(value_413) {
    return this.from("punctuator", value_413);
  }
  fromKeyword(value_414) {
    return this.from("keyword");
  }
  fromIdentifier(value_415) {
    return this.from("identifier", value_415);
  }
  fromRegularExpression(value_416) {
    return this.from("regularExpression", value_416);
  }
  fromBraces(inner_417) {
    return this.from("braces", inner_417);
  }
  fromBrackets(inner_418) {
    return this.from("brackets", inner_418);
  }
  fromParens(inner_419) {
    return this.from("parens", inner_419);
  }
  match(type_420, value_421) {
    let stx_422 = this[symWrap_398];
    if (typeof stx_422.match === "function") {
      return stx_422.match(type_420, value_421);
    }
  }
  isIdentifier(value_423) {
    return this.match("identifier", value_423);
  }
  isAssign(value_424) {
    return this.match("assign", value_424);
  }
  isBooleanLiteral(value_425) {
    return this.match("boolean", value_425);
  }
  isKeyword(value_426) {
    return this.match("keyword", value_426);
  }
  isNullLiteral(value_427) {
    return this.match("null", value_427);
  }
  isNumericLiteral(value_428) {
    return this.match("number", value_428);
  }
  isPunctuator(value_429) {
    return this.match("punctuator", value_429);
  }
  isStringLiteral(value_430) {
    return this.match("string", value_430);
  }
  isRegularExpression(value_431) {
    return this.match("regularExpression", value_431);
  }
  isTemplate(value_432) {
    return this.match("template", value_432);
  }
  isDelimiter(value_433) {
    return this.match("delimiter", value_433);
  }
  isParens(value_434) {
    return this.match("parens", value_434);
  }
  isBraces(value_435) {
    return this.match("braces", value_435);
  }
  isBrackets(value_436) {
    return this.match("brackets", value_436);
  }
  isSyntaxTemplate(value_437) {
    return this.match("syntaxTemplate", value_437);
  }
  isEOF(value_438) {
    return this.match("eof", value_438);
  }
  lineNumber() {
    return this[symWrap_398].lineNumber();
  }
  val() {
    return getVal_400(this[symWrap_398]);
  }
  inner() {
    let stx_439 = this[symWrap_398];
    if (!stx_439.match("delimiter")) {
      throw new Error("Can only get inner syntax on a delimiter");
    }
    let enf_440 = new _enforester.Enforester(stx_439.inner(), (0, _immutable.List)(), this.context);
    return new MacroContext(enf_440, "inner", this.context);
  }
}
function unwrap_402(x_441) {
  if (x_441 instanceof SyntaxOrTermWrapper_401) {
    return x_441[symWrap_398];
  }
  return x_441;
}
function cloneEnforester_403(enf_442) {
  const rest = enf_442.rest;
  const prev = enf_442.prev;
  const context = enf_442.context;

  return new _enforester.Enforester(rest, prev, context);
}
function Marker_404() {}
class MacroContext {
  constructor(enf_443, name_444, context_445, useScope_446, introducedScope_447) {
    const startMarker_448 = new Marker_404();
    const startEnf_449 = cloneEnforester_403(enf_443);
    const priv_450 = { name: name_444, context: context_445, startMarker: startMarker_448, markers: new Map([[startMarker_448, enf_443]]) };
    if (useScope_446 && introducedScope_447) {
      priv_450.noScopes = false;
      priv_450.useScope = useScope_446;
      priv_450.introducedScope = introducedScope_447;
    } else {
      priv_450.noScopes = true;
    }
    privateData_399.set(this, priv_450);
    this.reset();
    this[Symbol.iterator] = () => this;
  }
  name() {
    var _privateData_399$get = privateData_399.get(this);

    const name = _privateData_399$get.name;
    const context = _privateData_399$get.context;

    return new SyntaxOrTermWrapper_401(name, context);
  }
  expand(type_451) {
    var _privateData_399$get2 = privateData_399.get(this);

    const enf = _privateData_399$get2.enf;
    const context = _privateData_399$get2.context;

    if (enf.rest.size === 0) {
      return { done: true, value: null };
    }
    enf.expandMacro();
    let originalRest_452 = enf.rest;
    let value_453;
    switch (type_451) {
      case "AssignmentExpression":
      case "expr":
        value_453 = enf.enforestExpressionLoop();
        break;
      case "Expression":
        value_453 = enf.enforestExpression();
        break;
      case "Statement":
      case "stmt":
        value_453 = enf.enforestStatement();
        break;
      case "BlockStatement":
      case "WhileStatement":
      case "IfStatement":
      case "ForStatement":
      case "SwitchStatement":
      case "BreakStatement":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "WithStatement":
      case "TryStatement":
      case "ThrowStatement":
      case "ClassDeclaration":
      case "FunctionDeclaration":
      case "LabeledStatement":
      case "VariableDeclarationStatement":
      case "ReturnStatement":
      case "ExpressionStatement":
        value_453 = enf.enforestStatement();
        (0, _errors.expect)(_.whereEq({ type: type_451 }, value_453), `Expecting a ${ type_451 }`, value_453, originalRest_452);
        break;
      case "YieldExpression":
        value_453 = enf.enforestYieldExpression();
        break;
      case "ClassExpression":
        value_453 = enf.enforestClass({ isExpr: true });
        break;
      case "ArrowExpression":
        value_453 = enf.enforestArrowExpression();
        break;
      case "NewExpression":
        value_453 = enf.enforestNewExpression();
        break;
      case "ThisExpression":
      case "FunctionExpression":
      case "IdentifierExpression":
      case "LiteralNumericExpression":
      case "LiteralInfinityExpression":
      case "LiteralStringExpression":
      case "TemplateExpression":
      case "LiteralBooleanExpression":
      case "LiteralNullExpression":
      case "LiteralRegExpExpression":
      case "ObjectExpression":
      case "ArrayExpression":
        value_453 = enf.enforestPrimaryExpression();
        break;
      case "UnaryExpression":
      case "UpdateExpression":
      case "BinaryExpression":
      case "StaticMemberExpression":
      case "ComputedMemberExpression":
      case "AssignmentExpression":
      case "CompoundAssignmentExpression":
      case "ConditionalExpression":
        value_453 = enf.enforestExpressionLoop();
        (0, _errors.expect)(_.whereEq({ type: type_451 }, value_453), `Expecting a ${ type_451 }`, value_453, originalRest_452);
        break;
      default:
        throw new Error("Unknown term type: " + type_451);
    }
    return { done: false, value: new SyntaxOrTermWrapper_401(value_453, context) };
  }
  _rest(enf_454) {
    const priv_455 = privateData_399.get(this);
    if (priv_455.markers.get(priv_455.startMarker) === enf_454) {
      return priv_455.enf.rest;
    }
    throw Error("Unauthorized access!");
  }
  reset(marker_456) {
    const priv_457 = privateData_399.get(this);
    let enf_458;
    if (marker_456 == null) {
      enf_458 = priv_457.markers.get(priv_457.startMarker);
    } else if (marker_456 && marker_456 instanceof Marker_404) {
      if (priv_457.markers.has(marker_456)) {
        enf_458 = priv_457.markers.get(marker_456);
      } else {
        throw new Error("marker must originate from this context");
      }
    } else {
      throw new Error("marker must be an instance of Marker");
    }
    priv_457.enf = cloneEnforester_403(enf_458);
  }
  mark() {
    const priv_459 = privateData_399.get(this);
    let marker_460;
    if (priv_459.enf.rest === priv_459.markers.get(priv_459.startMarker).rest) {
      marker_460 = priv_459.startMarker;
    } else if (priv_459.enf.rest.isEmpty()) {
      if (!priv_459.endMarker) priv_459.endMarker = new Marker_404();
      marker_460 = priv_459.endMarker;
    } else {
      marker_460 = new Marker_404();
    }
    if (!priv_459.markers.has(marker_460)) {
      priv_459.markers.set(marker_460, cloneEnforester_403(priv_459.enf));
    }
    return marker_460;
  }
  next() {
    var _privateData_399$get3 = privateData_399.get(this);

    const enf = _privateData_399$get3.enf;
    const noScopes = _privateData_399$get3.noScopes;
    const useScope = _privateData_399$get3.useScope;
    const introducedScope = _privateData_399$get3.introducedScope;
    const context = _privateData_399$get3.context;

    if (enf.rest.size === 0) {
      return { done: true, value: null };
    }
    let value_461 = enf.advance();
    if (!noScopes) {
      value_461 = value_461.addScope(useScope, context.bindings, _syntax.ALL_PHASES).addScope(introducedScope, context.bindings, _syntax.ALL_PHASES, { flip: true });
    }
    return { done: false, value: new SyntaxOrTermWrapper_401(value_461, context) };
  }
}
exports.default = MacroContext;
exports.SyntaxOrTermWrapper = SyntaxOrTermWrapper_401;
exports.unwrap = unwrap_402;
//# sourceMappingURL=data:application/json;base64,