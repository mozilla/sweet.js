"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReducer = require("shift-reducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseReducer extends _shiftReducer.CloneReducer {
  constructor(context_573) {
    super();
    this.context = context_573;
  }
  reduceModule(node_574, state_575) {
    return new _terms2.default("Module", { directives: state_575.directives.toArray(), items: state_575.items.toArray() });
  }
  reduceImport(node_576, state_577) {
    let moduleSpecifier_578 = state_577.moduleSpecifier ? state_577.moduleSpecifier.val() : null;
    return new _terms2.default("Import", { defaultBinding: state_577.defaultBinding, namedImports: state_577.namedImports.toArray(), moduleSpecifier: moduleSpecifier_578, forSyntax: node_576.forSyntax });
  }
  reduceImportNamespace(node_579, state_580) {
    let moduleSpecifier_581 = state_580.moduleSpecifier ? state_580.moduleSpecifier.val() : null;
    return new _terms2.default("ImportNamespace", { defaultBinding: state_580.defaultBinding, namespaceBinding: state_580.namespaceBinding, moduleSpecifier: moduleSpecifier_581, forSyntax: node_579.forSyntax });
  }
  reduceExport(node_582, state_583) {
    return new _terms2.default("Export", { declaration: state_583.declaration });
  }
  reduceExportAllFrom(node_584, state_585) {
    let moduleSpecifier_586 = state_585.moduleSpecifier ? state_585.moduleSpecifier.val() : null;
    return new _terms2.default("ExportAllFrom", { moduleSpecifier: moduleSpecifier_586 });
  }
  reduceExportFrom(node_587, state_588) {
    let moduleSpecifier_589 = state_588.moduleSpecifier ? state_588.moduleSpecifier.val() : null;
    return new _terms2.default("ExportFrom", { moduleSpecifier: moduleSpecifier_589, namedExports: state_588.namedExports.toArray() });
  }
  reduceExportSpecifier(node_590, state_591) {
    let name_592 = state_591.name,
        exportedName_593 = state_591.exportedName;
    if (name_592 == null) {
      name_592 = exportedName_593.resolve(this.context.phase);
      exportedName_593 = exportedName_593.val();
    } else {
      name_592 = name_592.resolve(this.context.phase);
      exportedName_593 = exportedName_593.val();
    }
    return new _terms2.default("ExportSpecifier", { name: name_592, exportedName: exportedName_593 });
  }
  reduceImportSpecifier(node_594, state_595) {
    let name_596 = state_595.name ? state_595.name.resolve(this.context.phase) : null;
    return new _terms2.default("ImportSpecifier", { name: name_596, binding: state_595.binding });
  }
  reduceIdentifierExpression(node_597, state_598) {
    return new _terms2.default("IdentifierExpression", { name: node_597.name.resolve(this.context.phase) });
  }
  reduceLiteralNumericExpression(node_599, state_600) {
    return new _terms2.default("LiteralNumericExpression", { value: node_599.value.val() });
  }
  reduceLiteralBooleanExpression(node_601, state_602) {
    return new _terms2.default("LiteralBooleanExpression", { value: node_601.value.val() === "true" });
  }
  reduceLiteralStringExpression(node_603, state_604) {
    return new _terms2.default("LiteralStringExpression", { value: node_603.value.token.str });
  }
  reduceCallExpression(node_605, state_606) {
    return new _terms2.default("CallExpression", { callee: state_606.callee, arguments: state_606.arguments.toArray() });
  }
  reduceFunctionBody(node_607, state_608) {
    return new _terms2.default("FunctionBody", { directives: state_608.directives.toArray(), statements: state_608.statements.toArray() });
  }
  reduceFormalParameters(node_609, state_610) {
    return new _terms2.default("FormalParameters", { items: state_610.items.toArray(), rest: state_610.rest });
  }
  reduceBindingIdentifier(node_611, state_612) {
    return new _terms2.default("BindingIdentifier", { name: node_611.name.resolve(this.context.phase) });
  }
  reduceBinaryExpression(node_613, state_614) {
    return new _terms2.default("BinaryExpression", { left: state_614.left, operator: node_613.operator.val(), right: state_614.right });
  }
  reduceObjectExpression(node_615, state_616) {
    return new _terms2.default("ObjectExpression", { properties: state_616.properties.toArray() });
  }
  reduceVariableDeclaration(node_617, state_618) {
    return new _terms2.default("VariableDeclaration", { kind: state_618.kind, declarators: state_618.declarators.toArray() });
  }
  reduceStaticPropertyName(node_619, state_620) {
    return new _terms2.default("StaticPropertyName", { value: node_619.value.val().toString() });
  }
  reduceArrayExpression(node_621, state_622) {
    return new _terms2.default("ArrayExpression", { elements: state_622.elements.toArray() });
  }
  reduceStaticMemberExpression(node_623, state_624) {
    return new _terms2.default("StaticMemberExpression", { object: state_624.object, property: state_624.property.val() });
  }
}
exports.default = ParseReducer;
//# sourceMappingURL=data:application/json;base64,