"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceTemplate = exports.processTemplate = undefined;

var _immutable = require("immutable");

var _ramdaFantasy = require("ramda-fantasy");

var _ramda = require("ramda");

var _ramda2 = _interopRequireDefault(_ramda);

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isDolar_960 = s_971 => s_971 && typeof s_971.match === "function" && s_971.match("identifier") && s_971.val() === "$";
const isDelimiter_961 = s_972 => s_972 && typeof s_972.match === "function" && s_972.match("delimiter");
const isBraces_962 = s_973 => s_973 && typeof s_973.match === "function" && s_973.match("braces");
const isParens_963 = s_974 => s_974 && typeof s_974.match === "function" && s_974.match("parens");
const isBrackets_964 = s_975 => s_975 && typeof s_975.match === "function" && s_975.match("brackets");
const insertIntoDelimiter_965 = _ramda2.default.cond([[isBraces_962, (s_976, r_977) => _syntax2.default.from("braces", r_977, s_976)], [isParens_963, (s_978, r_979) => _syntax2.default.from("parens", r_979, s_978)], [isBrackets_964, (s_980, r_981) => _syntax2.default.from("brackets", r_981, s_980)]]);
const process_966 = (acc_982, s_983) => {
  if (isBraces_962(s_983) && isDolar_960(acc_982.template.last())) {
    return { template: acc_982.template.push(_syntax2.default.from("braces", _immutable.List.of(_syntax2.default.from("number", acc_982.interp.size)), s_983)), interp: acc_982.interp.push(s_983.inner()) };
  } else if (isDelimiter_961(s_983)) {
    let innerResult = processTemplate_969(s_983.inner(), acc_982.interp);
    return { template: acc_982.template.push(insertIntoDelimiter_965(s_983, innerResult.template)), interp: innerResult.interp };
  } else {
    return { template: acc_982.template.push(s_983), interp: acc_982.interp };
  }
};
function cloneLineNumber_967(to_984, from_985) {
  if (from_985 && to_984) {
    if (typeof to_984.setLineNumber === "function") {
      return to_984.setLineNumber(from_985.lineNumber());
    } else if (_immutable.List.isList(to_984)) {
      return to_984.map(x_986 => cloneLineNumber_967(x_986, from_985));
    }
  }
  return to_984;
}
const replace_968 = (acc_987, s_988) => {
  let last_989 = acc_987.template.get(-1);
  let beforeLast_990 = acc_987.template.get(-2);
  if (isBraces_962(s_988) && isDolar_960(last_989)) {
    let index = s_988.inner().first().val();
    (0, _errors.assert)(acc_987.rep.size > index, "unknown replacement value");
    let replacement = cloneLineNumber_967(acc_987.rep.get(index), beforeLast_990);
    return { template: acc_987.template.pop().concat(replacement), rep: acc_987.rep };
  } else if (isDelimiter_961(s_988)) {
    let innerResult = replaceTemplate_970(s_988.inner(), acc_987.rep);
    return { template: acc_987.template.push(insertIntoDelimiter_965(s_988, innerResult)), rep: acc_987.rep };
  } else {
    return { template: acc_987.template.push(s_988), rep: acc_987.rep };
  }
};
function processTemplate_969(temp_991) {
  let interp_992 = arguments.length <= 1 || arguments[1] === undefined ? (0, _immutable.List)() : arguments[1];

  return temp_991.reduce(process_966, { template: (0, _immutable.List)(), interp: interp_992 });
}
function replaceTemplate_970(temp_993, rep_994) {
  return temp_993.reduce(replace_968, { template: (0, _immutable.List)(), rep: rep_994 }).template;
}
exports.processTemplate = processTemplate_969;
exports.replaceTemplate = replaceTemplate_970;
//# sourceMappingURL=data:application/json;base64,