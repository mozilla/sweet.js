"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processTemplate = processTemplate;
exports.replaceTemplate = replaceTemplate;

var _immutable = require("immutable");

var _ramdaFantasy = require("ramda-fantasy");

var _ramda = require("ramda");

var _ramda2 = _interopRequireDefault(_ramda);

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isDolar_709 = function isDolar_709(s_718) {
  return s_718 && s_718 instanceof _syntax2.default && s_718.isIdentifier() && s_718.val() === "$";
};
var isDelimiter_710 = function isDelimiter_710(s_719) {
  return s_719 && typeof s_719.isDelimiter === "function" && s_719.isDelimiter();
};
var isBraces_711 = function isBraces_711(s_720) {
  return s_720 && typeof s_720.isBraces === "function" && s_720.isBraces();
};
var isParens_712 = function isParens_712(s_721) {
  return s_721 && typeof s_721.isParens === "function" && s_721.isParens();
};
var isBrackets_713 = function isBrackets_713(s_722) {
  return s_722 && typeof s_722.isBrackets === "function" && s_722.isBrackets();
};
var insertIntoDelimiter_714 = _ramda2.default.cond([[isBraces_711, function (s_723, r_724) {
  return _syntax2.default.fromBraces(r_724, s_723);
}], [isParens_712, function (s_725, r_726) {
  return _syntax2.default.fromParens(r_726, s_725);
}], [isBrackets_713, function (s_727, r_728) {
  return _syntax2.default.fromBrackets(r_728, s_727);
}]]);
var process_715 = function process_715(acc_729, s_730) {
  if (isBraces_711(s_730) && isDolar_709(acc_729.template.last())) {
    return { template: acc_729.template.push(_syntax2.default.fromBraces(_immutable.List.of(_syntax2.default.fromNumber(acc_729.interp.size)), s_730)), interp: acc_729.interp.push(s_730.inner()) };
  } else if (isDelimiter_710(s_730)) {
    var innerResult = processTemplate(s_730.inner(), acc_729.interp);
    return { template: acc_729.template.push(insertIntoDelimiter_714(s_730, innerResult.template)), interp: innerResult.interp };
  } else {
    return { template: acc_729.template.push(s_730), interp: acc_729.interp };
  }
};
function cloneLineNumber_716(to_731, from_732) {
  if (from_732 && to_731 && typeof to_731.setLineNumber === "function") {
    return to_731.setLineNumber(from_732.lineNumber());
  }
  return to_731;
}
var replace_717 = function replace_717(acc_733, s_734) {
  var last_735 = acc_733.template.get(-1);
  var beforeLast_736 = acc_733.template.get(-2);
  if (isBraces_711(s_734) && isDolar_709(last_735)) {
    var index = s_734.inner().first().val();
    (0, _errors.assert)(acc_733.rep.size > index, "unknown replacement value");
    var replacement = cloneLineNumber_716(acc_733.rep.get(index), beforeLast_736);
    return { template: acc_733.template.pop().concat(replacement), rep: acc_733.rep };
  } else if (isDelimiter_710(s_734)) {
    var innerResult = replaceTemplate(s_734.inner(), acc_733.rep);
    return { template: acc_733.template.push(insertIntoDelimiter_714(s_734, innerResult)), rep: acc_733.rep };
  } else {
    return { template: acc_733.template.push(s_734), rep: acc_733.rep };
  }
};
function processTemplate(temp_737) {
  var interp_738 = arguments.length <= 1 || arguments[1] === undefined ? (0, _immutable.List)() : arguments[1];

  return temp_737.reduce(process_715, { template: (0, _immutable.List)(), interp: interp_738 });
}
function replaceTemplate(temp_739, rep_740) {
  return temp_739.reduce(replace_717, { template: (0, _immutable.List)(), rep: rep_740 }).template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3N3ZWV0L3RlbXBsYXRlLXByb2Nlc3Nvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQTBDZ0IsZSxHQUFBLGU7UUFHQSxlLEdBQUEsZTs7QUE3Q2hCOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBLElBQU0sY0FBYyxTQUFkLFdBQWM7QUFBQSxTQUFTLFNBQVMsaUNBQVQsSUFBb0MsTUFBTSxZQUFOLEVBQXBDLElBQTRELE1BQU0sR0FBTixPQUFnQixHQUFyRjtBQUFBLENBQXBCO0FBQ0EsSUFBTSxrQkFBa0IsU0FBbEIsZUFBa0I7QUFBQSxTQUFTLFNBQVMsT0FBTyxNQUFNLFdBQWIsS0FBNkIsVUFBdEMsSUFBb0QsTUFBTSxXQUFOLEVBQTdEO0FBQUEsQ0FBeEI7QUFDQSxJQUFNLGVBQWUsU0FBZixZQUFlO0FBQUEsU0FBUyxTQUFTLE9BQU8sTUFBTSxRQUFiLEtBQTBCLFVBQW5DLElBQWlELE1BQU0sUUFBTixFQUExRDtBQUFBLENBQXJCO0FBQ0EsSUFBTSxlQUFlLFNBQWYsWUFBZTtBQUFBLFNBQVMsU0FBUyxPQUFPLE1BQU0sUUFBYixLQUEwQixVQUFuQyxJQUFpRCxNQUFNLFFBQU4sRUFBMUQ7QUFBQSxDQUFyQjtBQUNBLElBQU0saUJBQWlCLFNBQWpCLGNBQWlCO0FBQUEsU0FBUyxTQUFTLE9BQU8sTUFBTSxVQUFiLEtBQTRCLFVBQXJDLElBQW1ELE1BQU0sVUFBTixFQUE1RDtBQUFBLENBQXZCO0FBQ0EsSUFBTSwwQkFBMEIsZ0JBQUUsSUFBRixDQUFPLENBQUMsQ0FBQyxZQUFELEVBQWUsVUFBQyxLQUFELEVBQVEsS0FBUjtBQUFBLFNBQWtCLGlCQUFPLFVBQVAsQ0FBa0IsS0FBbEIsRUFBeUIsS0FBekIsQ0FBbEI7QUFBQSxDQUFmLENBQUQsRUFBb0UsQ0FBQyxZQUFELEVBQWUsVUFBQyxLQUFELEVBQVEsS0FBUjtBQUFBLFNBQWtCLGlCQUFPLFVBQVAsQ0FBa0IsS0FBbEIsRUFBeUIsS0FBekIsQ0FB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LEtBQUssUUFBUSxHQUF0RCxFQUFQO0FBQ0Q7QUFDRixDQWREO0FBZU8sU0FBUyxlQUFULENBQXlCLFFBQXpCLEVBQXdEO0FBQUEsTUFBckIsVUFBcUIseURBQVIsc0JBQVE7O0FBQzdELFNBQU8sU0FBUyxNQUFULENBQWdCLFdBQWhCLEVBQTZCLEVBQUMsVUFBVSxzQkFBWCxFQUFtQixRQUFRLFVBQTNCLEVBQTdCLENBQVA7QUFDRDtBQUNNLFNBQVMsZUFBVCxDQUF5QixRQUF6QixFQUFtQyxPQUFuQyxFQUE0QztBQUNqRCxTQUFPLFNBQVMsTUFBVCxDQUFnQixXQUFoQixFQUE2QixFQUFDLFVBQVUsc0JBQVgsRUFBbUIsS0FBSyxPQUF4QixFQUE3QixFQUErRCxRQUF0RTtBQUNEIiwiZmlsZSI6InRlbXBsYXRlLXByb2Nlc3Nvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TGlzdH0gZnJvbSBcImltbXV0YWJsZVwiO1xuaW1wb3J0IHtNYXliZX0gZnJvbSBcInJhbWRhLWZhbnRhc3lcIjtcbmltcG9ydCBfIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IFN5bnRheCBmcm9tIFwiLi9zeW50YXhcIjtcbmltcG9ydCB7YXNzZXJ0fSBmcm9tIFwiLi9lcnJvcnNcIjtcbmNvbnN0IGlzRG9sYXJfNzA5ID0gc183MTggPT4gc183MTggJiYgc183MTggaW5zdGFuY2VvZiBTeW50YXggJiYgc183MTguaXNJZGVudGlmaWVyKCkgJiYgc183MTgudmFsKCkgPT09IFwiJFwiO1xuY29uc3QgaXNEZWxpbWl0ZXJfNzEwID0gc183MTkgPT4gc183MTkgJiYgdHlwZW9mIHNfNzE5LmlzRGVsaW1pdGVyID09PSBcImZ1bmN0aW9uXCIgJiYgc183MTkuaXNEZWxpbWl0ZXIoKTtcbmNvbnN0IGlzQnJhY2VzXzcxMSA9IHNfNzIwID0+IHNfNzIwICYmIHR5cGVvZiBzXzcyMC5pc0JyYWNlcyA9PT0gXCJmdW5jdGlvblwiICYmIHNfNzIwLmlzQnJhY2VzKCk7XG5jb25zdCBpc1BhcmVuc183MTIgPSBzXzcyMSA9PiBzXzcyMSAmJiB0eXBlb2Ygc183MjEuaXNQYXJlbnMgPT09IFwiZnVuY3Rpb25cIiAmJiBzXzcyMS5pc1BhcmVucygpO1xuY29uc3QgaXNCcmFja2V0c183MTMgPSBzXzcyMiA9PiBzXzcyMiAmJiB0eXBlb2Ygc183MjIuaXNCcmFja2V0cyA9PT0gXCJmdW5jdGlvblwiICYmIHNfNzIyLmlzQnJhY2tldHMoKTtcbmNvbnN0IGluc2VydEludG9EZWxpbWl0ZXJfNzE0ID0gXy5jb25kKFtbaXNCcmFjZXNfNzExLCAoc183MjMsIHJfNzI0KSA9PiBTeW50YXguZnJvbUJyYWNlcyhyXzcyNCwgc183MjMpXSwgW2lzUGFyZW5zXzcxMiwgKHNfNzI1LCByXzcyNikgPT4gU3ludGF4LmZyb21QYXJlbnMocl83MjYsIHNfNzI1KV0sIFtpc0JyYWNrZXRzXzcxMywgKHNfNzI3LCByXzcyOCkgPT4gU3ludGF4LmZyb21CcmFja2V0cyhyXzcyOCwgc183MjcpXV0pO1xuY29uc3QgcHJvY2Vzc183MTUgPSAoYWNjXzcyOSwgc183MzApID0+IHtcbiAgaWYgKGlzQnJhY2VzXzcxMShzXzczMCkgJiYgaXNEb2xhcl83MDkoYWNjXzcyOS50ZW1wbGF0ZS5sYXN0KCkpKSB7XG4gICAgcmV0dXJuIHt0ZW1wbGF0ZTogYWNjXzcyOS50ZW1wbGF0ZS5wdXNoKFN5bnRheC5mcm9tQnJhY2VzKExpc3Qub2YoU3ludGF4LmZyb21OdW1iZXIoYWNjXzcyOS5pbnRlcnAuc2l6ZSkpLCBzXzczMCkpLCBpbnRlcnA6IGFjY183MjkuaW50ZXJwLnB1c2goc183MzAuaW5uZXIoKSl9O1xuICB9IGVsc2UgaWYgKGlzRGVsaW1pdGVyXzcxMChzXzczMCkpIHtcbiAgICBsZXQgaW5uZXJSZXN1bHQgPSBwcm9jZXNzVGVtcGxhdGUoc183MzAuaW5uZXIoKSwgYWNjXzcyOS5pbnRlcnApO1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY183MjkudGVtcGxhdGUucHVzaChpbnNlcnRJbnRvRGVsaW1pdGVyXzcxNChzXzczMCwgaW5uZXJSZXN1bHQudGVtcGxhdGUpKSwgaW50ZXJwOiBpbm5lclJlc3VsdC5pbnRlcnB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY183MjkudGVtcGxhdGUucHVzaChzXzczMCksIGludGVycDogYWNjXzcyOS5pbnRlcnB9O1xuICB9XG59O1xuZnVuY3Rpb24gY2xvbmVMaW5lTnVtYmVyXzcxNih0b183MzEsIGZyb21fNzMyKSB7XG4gIGlmIChmcm9tXzczMiAmJiB0b183MzEgJiYgdHlwZW9mIHRvXzczMS5zZXRMaW5lTnVtYmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gdG9fNzMxLnNldExpbmVOdW1iZXIoZnJvbV83MzIubGluZU51bWJlcigpKTtcbiAgfVxuICByZXR1cm4gdG9fNzMxO1xufVxuY29uc3QgcmVwbGFjZV83MTcgPSAoYWNjXzczMywgc183MzQpID0+IHtcbiAgbGV0IGxhc3RfNzM1ID0gYWNjXzczMy50ZW1wbGF0ZS5nZXQoLTEpO1xuICBsZXQgYmVmb3JlTGFzdF83MzYgPSBhY2NfNzMzLnRlbXBsYXRlLmdldCgtMik7XG4gIGlmIChpc0JyYWNlc183MTEoc183MzQpICYmIGlzRG9sYXJfNzA5KGxhc3RfNzM1KSkge1xuICAgIGxldCBpbmRleCA9IHNfNzM0LmlubmVyKCkuZmlyc3QoKS52YWwoKTtcbiAgICBhc3NlcnQoYWNjXzczMy5yZXAuc2l6ZSA+IGluZGV4LCBcInVua25vd24gcmVwbGFjZW1lbnQgdmFsdWVcIik7XG4gICAgbGV0IHJlcGxhY2VtZW50ID0gY2xvbmVMaW5lTnVtYmVyXzcxNihhY2NfNzMzLnJlcC5nZXQoaW5kZXgpLCBiZWZvcmVMYXN0XzczNik7XG4gICAgcmV0dXJuIHt0ZW1wbGF0ZTogYWNjXzczMy50ZW1wbGF0ZS5wb3AoKS5jb25jYXQocmVwbGFjZW1lbnQpLCByZXA6IGFjY183MzMucmVwfTtcbiAgfSBlbHNlIGlmIChpc0RlbGltaXRlcl83MTAoc183MzQpKSB7XG4gICAgbGV0IGlubmVyUmVzdWx0ID0gcmVwbGFjZVRlbXBsYXRlKHNfNzM0LmlubmVyKCksIGFjY183MzMucmVwKTtcbiAgICByZXR1cm4ge3RlbXBsYXRlOiBhY2NfNzMzLnRlbXBsYXRlLnB1c2goaW5zZXJ0SW50b0RlbGltaXRlcl83MTQoc183MzQsIGlubmVyUmVzdWx0KSksIHJlcDogYWNjXzczMy5yZXB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY183MzMudGVtcGxhdGUucHVzaChzXzczNCksIHJlcDogYWNjXzczMy5yZXB9O1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NUZW1wbGF0ZSh0ZW1wXzczNywgaW50ZXJwXzczOCA9IExpc3QoKSkge1xuICByZXR1cm4gdGVtcF83MzcucmVkdWNlKHByb2Nlc3NfNzE1LCB7dGVtcGxhdGU6IExpc3QoKSwgaW50ZXJwOiBpbnRlcnBfNzM4fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZVRlbXBsYXRlKHRlbXBfNzM5LCByZXBfNzQwKSB7XG4gIHJldHVybiB0ZW1wXzczOS5yZWR1Y2UocmVwbGFjZV83MTcsIHt0ZW1wbGF0ZTogTGlzdCgpLCByZXA6IHJlcF83NDB9KS50ZW1wbGF0ZTtcbn1cbiJdfQ==