"use strict";

var _sweetJs = require("./sweet.js");

var compile859 = _sweetJs.compile859;
var expand856 = _sweetJs.expand856;
var setReadtable861 = _sweetJs.setReadtable861;

var fs0 = require("fs");
var path1 = require("path");
var pkg2 = require("../package.json");
var syn3 = require("./syntax.js");
var argv939 = require("optimist").usage("Usage: sjs [options] path/to/file.js").alias("o", "output").describe("o", "write files to the specified directory").alias("m", "sourcemap").describe("m", "generate a sourcemap").boolean("sourcemap").alias("r", "readable-names").describe("r", "remove as many hygienic renames as possible (ES5 code only!)").boolean("readable-names").alias("d", "display").describe("d", "display result of compilation to stdout (but do not write to disk)").boolean("display").alias("w", "watch").describe("w", "watch a file").boolean("watch").alias("t", "tokens").describe("t", "just emit the expanded tokens without parsing an AST").alias("a", "ast").describe("a", "just emit the expanded AST").alias("p", "no-parse").describe("p", "print out the expanded result but do not run through the parser (or apply hygienic renamings)").boolean("no-parse").alias("s", "stdin").describe("s", "read from stdin").boolean("stdin").alias("n", "num-expands").describe("n", "the maximum number of expands to perform").alias("h", "step-hygiene").describe("h", "display hygienic renames when stepping with \"--num-expands\"").describe("format-indent", "number of spaces for indentation").alias("l", "load-readtable").describe("load-readtable", "readtable module to install").alias("b", "babel").describe("babel", "run output through babel compiler").boolean("babel").describe("babel-modules", "have babel output with specified module formatter").alias("v", "version").describe("v", "display version info").boolean("version").argv;
exports.run = function () {
    if (argv939.version) {
        return console.log("Sweet.js version: " + pkg2.version);
    }
    var infile940 = argv939._[0];
    var writeToDisk941 = argv939.output;
    var watch942 = argv939.watch;
    var tokens943 = argv939.tokens;
    var ast944 = argv939.ast;
    var sourcemap945 = argv939.sourcemap;
    var display946 = argv939.display;
    var transpile947 = argv939.transpile;
    var noparse948 = argv939["no-parse"];
    var numexpands949 = argv939["num-expands"];
    var displayHygiene950 = argv939["step-hygiene"];
    var readableNames951 = argv939["readable-names"];
    var formatIndent952 = parseInt(argv939["format-indent"], 10);
    var readtableModules953 = argv939["load-readtable"];
    var babel954 = argv939.babel;
    var babelModules955 = argv939["babel-modules"];
    if (formatIndent952 !== formatIndent952) {
        formatIndent952 = 4;
    }
    var file956;
    if (infile940) {
        file956 = fs0.readFileSync(infile940, "utf8");
    } else if (argv939.stdin) {
        file956 = fs0.readFileSync("/dev/stdin", "utf8");
    } else if (argv939._.length === 0) {
        console.log(require("optimist").help());
        return;
    }
    var cwd957 = process.cwd();
    if (readtableModules953) {
        readtableModules953 = Array.isArray(readtableModules953) ? readtableModules953 : [readtableModules953];
        readtableModules953.forEach(function (mod960) {
            setReadtable861(mod960);
        });
    }
    var options958 = {
        filename: infile940,
        compileSuffix: ".jsc",
        ast: ast944,
        sourceMap: sourcemap945,
        babel: babel954,
        babelModules: babelModules955,
        readableNames: readableNames951,
        escodegen: { format: { indent: { style: Array(formatIndent952 + 1).join(" ") } } }
    };
    function doCompile959(outputDirectory961) {
        var result962 = compile859(file956, options958);
        result962.forEach(function (res963) {
            var outfile964, mapfile965;
            if (outputDirectory961) {
                var filename966 = path1.basename(res963.path);
                var dirname967 = path1.dirname(res963.path);
                var relativeDir968 = path1.relative(dirname967, writeToDisk941);
                outfile964 = path1.resolve(dirname967, relativeDir968, filename966 + options958.compileSuffix);
                mapfile965 = path1.resolve(dirname967, relativeDir968, filename966 + ".map");
            } else {
                outfile964 = res963.path + options958.compileSuffix;
                mapfile965 = res963.path + ".map";
            }
            console.log("compiling: " + outfile964);
            if (sourcemap945) {
                fs0.writeFileSync(outfile964, res963.code + "\n//# sourceMappingURL=" + mapfile965, "utf8");
                fs0.writeFileSync(mapfile965, res963.sourceMap, "utf8");
            } else {
                fs0.writeFileSync(outfile964, res963.code, "utf8");
            }
        });
    }
    if (watch942 && writeToDisk941) {
        fs0.watch(infile940, function () {
            file956 = fs0.readFileSync(infile940, "utf8");
            try {
                doCompile959();
            } catch (e969) {
                console.log(e969);
            }
        });
    } else if (writeToDisk941) {
        doCompile959(writeToDisk941);
    } else if (tokens943) {
        console.log(expand856(file956, modules, { maxExpands: numexpands949 }));
    } else if (ast944) {
        console.log(JSON.stringify(compile859(file956, options958), null, formatIndent952));
    } else if (noparse948) {
        var expanded970 = expand856(file956, modules, { maxExpands: numexpands949 });
        var unparsedString971 = syn3.prettyPrint(expanded970, displayHygiene950);
        console.log(unparsedString971);
    } else if (display946) {
        options958.maxExpands = numexpands949;
        var result972 = compile859(file956, options958);
        result972.forEach(function (res973) {
            console.log("file: " + res973.path);
            console.log(res973.code + "\n");
        });
    } else {
        doCompile959();
    }
};