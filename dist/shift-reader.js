"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tokenizer = require("shift-parser/dist/tokenizer");

var _tokenizer2 = _interopRequireDefault(_tokenizer);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _ramdaFantasy = require("ramda-fantasy");

var _errors = require("./errors");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Just_662 = _ramdaFantasy.Maybe.Just;
const Nothing_663 = _ramdaFantasy.Maybe.Nothing;
const LSYNTAX_664 = { name: "left-syntax" };
const RSYNTAX_665 = { name: "right-syntax" };
const AT_666 = { klass: _tokenizer.TokenClass.Punctuator, name: "@" };
const literalKeywords_667 = ["this", "null", "true", "false"];
const isLeftBracket_668 = R.whereEq({ type: _tokenizer.TokenType.LBRACK });
const isLeftBrace_669 = R.whereEq({ type: _tokenizer.TokenType.LBRACE });
const isLeftParen_670 = R.whereEq({ type: _tokenizer.TokenType.LPAREN });
const isRightBracket_671 = R.whereEq({ type: _tokenizer.TokenType.RBRACK });
const isRightBrace_672 = R.whereEq({ type: _tokenizer.TokenType.RBRACE });
const isRightParen_673 = R.whereEq({ type: _tokenizer.TokenType.RPAREN });
const isEOS_674 = R.whereEq({ type: _tokenizer.TokenType.EOS });
const isHash_675 = R.whereEq({ type: _tokenizer.TokenType.IDENTIFIER, value: "#" });
const isLeftSyntax_676 = R.whereEq({ type: LSYNTAX_664 });
const isRightSyntax_677 = R.whereEq({ type: RSYNTAX_665 });
const isLeftDelimiter_678 = R.anyPass([isLeftBracket_668, isLeftBrace_669, isLeftParen_670, isLeftSyntax_676]);
const isRightDelimiter_679 = R.anyPass([isRightBracket_671, isRightBrace_672, isRightParen_673, isRightSyntax_677]);
const isMatchingDelimiters_680 = R.cond([[isLeftBracket_668, (__721, b_722) => isRightBracket_671(b_722)], [isLeftBrace_669, (__723, b_724) => isRightBrace_672(b_724)], [isLeftParen_670, (__725, b_726) => isRightParen_673(b_726)], [isLeftSyntax_676, (__727, b_728) => isRightSyntax_677(b_728)], [R.T, R.F]]);
const assignOps_681 = ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ","];
const binaryOps_682 = ["+", "-", "*", "/", "%", "<<", ">>", ">>>", "&", "|", "^", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!==", "instanceof"];
const unaryOps_683 = ["++", "--", "~", "!", "delete", "void", "typeof", "yield", "throw", "new"];
const isEmpty_684 = R.whereEq({ size: 0 });
const isPunctuator_685 = s_729 => s_729.match("punctuator");
const isKeyword_686 = s_730 => s_730.match("keyword");
const isDelimiter_687 = s_731 => s_731.match("delimiter");
const isParens_688 = s_732 => s_732.match("parens");
const isBraces_689 = s_733 => s_733.match("braces");
const isBrackets_690 = s_734 => s_734.match("brackets");
const isIdentifier_691 = s_735 => s_735.match("identifier");
const val_692 = s_736 => s_736.val();
const isVal_693 = R.curry((v_737, s_738) => s_738.val() === v_737);
const isDot_694 = R.allPass([isPunctuator_685, isVal_693(".")]);
const isColon_695 = R.allPass([isPunctuator_685, isVal_693(":")]);
const isFunctionKeyword_696 = R.allPass([isKeyword_686, isVal_693("function")]);
const isOperator_697 = s_739 => (s_739.match("punctuator") || s_739.match("keyword")) && R.any(R.equals(s_739.val()), assignOps_681.concat(binaryOps_682).concat(unaryOps_683));
const isNonLiteralKeyword_698 = R.allPass([isKeyword_686, s_740 => R.none(R.equals(s_740.val()), literalKeywords_667)]);
const isKeywordExprPrefix_699 = R.allPass([isKeyword_686, s_741 => R.any(R.equals(s_741.val()), ["instanceof", "typeof", "delete", "void", "yield", "throw", "new", "case"])]);
let last_700 = p_742 => p_742.last();
let safeLast_701 = R.pipe(R.cond([[isEmpty_684, R.always(Nothing_663())], [R.T, R.compose(_ramdaFantasy.Maybe.of, last_700)]]));
let stuffTrue_702 = R.curry((p_743, b_744) => b_744 ? Just_662(p_743) : Nothing_663());
let stuffFalse_703 = R.curry((p_745, b_746) => !b_746 ? Just_662(p_745) : Nothing_663());
let isTopColon_704 = R.pipe(safeLast_701, R.map(isColon_695), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isTopPunctuator_705 = R.pipe(safeLast_701, R.map(isPunctuator_685), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprReturn_706 = R.curry((l_747, p_748) => {
  let retKwd_749 = safeLast_701(p_748);
  let maybeDot_750 = pop_717(p_748).chain(safeLast_701);
  if (maybeDot_750.map(isDot_694).getOrElse(false)) {
    return true;
  }
  return retKwd_749.map(s_751 => {
    return s_751.match("keyword") && s_751.val() === "return" && s_751.lineNumber() === l_747;
  }).getOrElse(false);
});
const isTopOperator_707 = R.pipe(safeLast_701, R.map(isOperator_697), _ramdaFantasy.Maybe.maybe(false, R.identity));
const isTopKeywordExprPrefix_708 = R.pipe(safeLast_701, R.map(isKeywordExprPrefix_699), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprPrefix_709 = R.curry((l_752, b_753) => R.cond([[isEmpty_684, R.always(b_753)], [isTopColon_704, R.always(b_753)], [isTopKeywordExprPrefix_708, R.T], [isTopOperator_707, R.T], [isTopPunctuator_705, R.always(b_753)], [isExprReturn_706(l_752), R.T], [R.T, R.F]]));
let curly_710 = p_754 => safeLast_701(p_754).map(isBraces_689).chain(stuffTrue_702(p_754));
let paren_711 = p_755 => safeLast_701(p_755).map(isParens_688).chain(stuffTrue_702(p_755));
let func_712 = p_756 => safeLast_701(p_756).map(isFunctionKeyword_696).chain(stuffTrue_702(p_756));
let ident_713 = p_757 => safeLast_701(p_757).map(isIdentifier_691).chain(stuffTrue_702(p_757));
let nonLiteralKeyword_714 = p_758 => safeLast_701(p_758).map(isNonLiteralKeyword_698).chain(stuffTrue_702(p_758));
let opt_715 = R.curry((a_759, b_760, p_761) => {
  let result_762 = R.pipeK(a_759, b_760)(_ramdaFantasy.Maybe.of(p_761));
  return _ramdaFantasy.Maybe.isJust(result_762) ? result_762 : _ramdaFantasy.Maybe.of(p_761);
});
let notDot_716 = R.ifElse(R.whereEq({ size: 0 }), Just_662, p_763 => safeLast_701(p_763).map(s_764 => !(s_764.match("punctuator") && s_764.val() === ".")).chain(stuffTrue_702(p_763)));
let pop_717 = R.compose(Just_662, p_765 => p_765.pop());
const functionPrefix_718 = R.pipeK(curly_710, pop_717, paren_711, pop_717, opt_715(ident_713, pop_717), func_712);
const isRegexPrefix_719 = b_766 => R.anyPass([isEmpty_684, isTopPunctuator_705, R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(nonLiteralKeyword_714, pop_717, notDot_716), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(paren_711, pop_717, nonLiteralKeyword_714, pop_717, notDot_716), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_718, R.chain(p_767 => {
  return safeLast_701(p_767).map(s_768 => s_768.lineNumber()).chain(fnLine_769 => {
    return pop_717(p_767).map(isExprPrefix_709(fnLine_769, b_766));
  }).chain(stuffFalse_703(p_767));
}), _ramdaFantasy.Maybe.isJust), p_770 => {
  let isCurly_771 = _ramdaFantasy.Maybe.isJust(safeLast_701(p_770).map(isBraces_689));
  let alreadyCheckedFunction_772 = R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_718, _ramdaFantasy.Maybe.isJust)(p_770);
  if (alreadyCheckedFunction_772) {
    return false;
  }
  return R.pipe(_ramdaFantasy.Maybe.of, R.chain(curly_710), R.chain(p_773 => {
    return safeLast_701(p_773).map(s_774 => s_774.lineNumber()).chain(curlyLine_775 => {
      return pop_717(p_773).map(isExprPrefix_709(curlyLine_775, b_766));
    }).chain(stuffFalse_703(p_773));
  }), _ramdaFantasy.Maybe.isJust)(p_770);
}]);
function lastEl_720(l_776) {
  return l_776[l_776.length - 1];
}
class Reader extends _tokenizer2.default {
  constructor(strings_777, context_778, replacements_779) {
    super(Array.isArray(strings_777) ? strings_777.join("") : strings_777);
    this.delimStack = new Map();
    this.insideSyntaxTemplate = [false];
    this.context = context_778;
    if (Array.isArray(strings_777)) {
      let totalIndex = 0;
      this.replacementIndex = R.reduce((acc_780, strRep_781) => {
        acc_780.push({ index: totalIndex + strRep_781[0].length, replacement: strRep_781[1] });
        totalIndex += strRep_781[0].length;
        return acc_780;
      }, [], R.zip(strings_777, replacements_779));
    }
  }
  read() {
    let stack_782 = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    let b_783 = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    let singleDelimiter_784 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let prefix_785 = (0, _immutable.List)();
    while (true) {
      let tok = this.advance(prefix_785, b_783);
      if (tok.scopesets || tok instanceof _terms2.default) {
        stack_782.push(tok);
        continue;
      }
      if (Array.isArray(tok)) {
        Array.prototype.push.apply(stack_782, tok);
        continue;
      }
      if (_immutable.List.isList(tok)) {
        Array.prototype.push.apply(stack_782, tok.toArray());
        continue;
      }
      if (isEOS_674(tok)) {
        if (stack_782[0] && isLeftDelimiter_678(stack_782[0].token)) {
          throw this.createUnexpected(tok);
        }
        break;
      }
      if (isLeftDelimiter_678(tok)) {
        if (isLeftSyntax_676(tok)) {
          this.insideSyntaxTemplate.push(true);
        }
        let line = tok.slice.startLocation.line;
        let innerB = isLeftBrace_669(tok) ? isExprPrefix_709(line, b_783)(prefix_785) : true;
        let inner = this.read([new _syntax2.default(tok, this.context)], innerB, false);
        let stx = new _syntax2.default(inner, this.context);
        prefix_785 = prefix_785.concat(stx);
        stack_782.push(stx);
        if (singleDelimiter_784) {
          break;
        }
      } else if (isRightDelimiter_679(tok)) {
        if (stack_782[0] && !isMatchingDelimiters_680(stack_782[0].token, tok)) {
          throw this.createUnexpected(tok);
        }
        let stx = new _syntax2.default(tok, this.context);
        stack_782.push(stx);
        if (lastEl_720(this.insideSyntaxTemplate) && isRightSyntax_677(tok)) {
          this.insideSyntaxTemplate.pop();
        }
        break;
      } else {
        let stx = new _syntax2.default(tok, this.context);
        prefix_785 = prefix_785.concat(stx);
        stack_782.push(stx);
      }
    }
    return (0, _immutable.List)(stack_782);
  }
  advance(prefix_786, b_787) {
    let startLocation_788 = this.getLocation();
    this.lastIndex = this.index;
    this.lastLine = this.line;
    this.lastLineStart = this.lineStart;
    this.skipComment();
    this.startIndex = this.index;
    this.startLine = this.line;
    this.startLineStart = this.lineStart;
    if (this.replacementIndex && this.replacementIndex[0] && this.index >= this.replacementIndex[0].index) {
      let rep = this.replacementIndex[0].replacement;
      this.replacementIndex.shift();
      return rep;
    }
    let charCode_789 = this.source.charCodeAt(this.index);
    if (charCode_789 === 96) {
      let element,
          items = [];
      let startLocation_788 = this.getLocation();
      let start = this.index;
      this.index++;
      if (lastEl_720(this.insideSyntaxTemplate)) {
        let slice = this.getSlice(start, startLocation_788);
        return { type: RSYNTAX_665, value: "`", slice: slice };
      }
      do {
        element = this.scanTemplateElement();
        items.push(element);
        if (element.interp) {
          element = this.read([], false, true);
          (0, _errors.assert)(element.size === 1, "should only have read a single delimiter inside a template");
          items.push(element.get(0));
        }
      } while (!element.tail);
      return { type: _tokenizer.TokenType.TEMPLATE, items: (0, _immutable.List)(items), slice: this.getSlice(start, startLocation_788) };
    } else if (charCode_789 === 35) {
      let startLocation_788 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_788);
      this.index++;
      if (this.source.charCodeAt(this.index) === 96) {
        this.index++;
        return { type: LSYNTAX_664, value: "#`", slice: slice };
      }
      return { type: _tokenizer.TokenType.IDENTIFIER, value: "#", slice: slice };
    } else if (charCode_789 === 64) {
      let startLocation_788 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_788);
      this.index++;
      return { type: AT_666, value: "@", slice: slice };
    }
    let lookahead_790 = super.advance();
    if (lookahead_790.type === _tokenizer.TokenType.DIV && isRegexPrefix_719(b_787)(prefix_786)) {
      return super.scanRegExp("/");
    }
    return lookahead_790;
  }
  scanTemplateElement() {
    let startLocation_791 = this.getLocation();
    let start_792 = this.index;
    while (this.index < this.source.length) {
      let ch = this.source.charCodeAt(this.index);
      switch (ch) {
        case 96:
          let slice = this.getSlice(start_792, startLocation_791);
          this.index++;
          return { type: _tokenizer.TokenType.TEMPLATE, tail: true, interp: false, slice: slice };
        case 36:
          if (this.source.charCodeAt(this.index + 1) === 123) {
            let slice = this.getSlice(start_792, startLocation_791);
            this.index += 1;
            return { type: _tokenizer.TokenType.TEMPLATE, tail: false, interp: true, slice: slice };
          }
          this.index++;
          break;
        case 92:
          {
            let octal = this.scanStringEscape("", null)[1];
            if (octal != null) {
              throw this.createILLEGAL();
            }
            break;
          }
        default:
          this.index++;
      }
    }
    throw this.createILLEGAL();
  }
}
exports.default = Reader;
//# sourceMappingURL=data:application/json;base64,