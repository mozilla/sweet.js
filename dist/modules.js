"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modules = exports.Module = undefined;

var _immutable = require("immutable");

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _tokenExpander = require("./token-expander.js");

var _tokenExpander2 = _interopRequireDefault(_tokenExpander);

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _symbol = require("./symbol");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _loadSyntax = require("./load-syntax");

var _compiler = require("./compiler");

var _compiler2 = _interopRequireDefault(_compiler);

var _transforms = require("./transforms");

var _scope = require("./scope");

var _errors = require("./errors");

var _hygieneUtils = require("./hygiene-utils");

var _syntax = require("./syntax");

var _utilsDirname = require("utils-dirname");

var _utilsDirname2 = _interopRequireDefault(_utilsDirname);

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Module_469 {
  constructor(moduleSpecifier_474, isNative_475, importEntries_476, exportEntries_477, pragmas_478, body_479) {
    this.moduleSpecifier = moduleSpecifier_474;
    this.isNative = isNative_475;
    this.importEntries = importEntries_476;
    this.exportEntries = exportEntries_477;
    this.pragmas = pragmas_478;
    this.body = body_479;
  }
}
const findBindingIdentifierName_470 = term_480 => {
  (0, _errors.assert)(term_480.name, `not implemented yet for type ${ term_480.type }`);
  return term_480.name;
};
const convertExport_471 = term_481 => {
  let declaration_482 = term_481.declaration;
  let bindings_483 = [];
  if ((0, _terms.isVariableDeclaration)(declaration_482)) {
    bindings_483 = declaration_482.declarators.map(decl_485 => findBindingIdentifierName_470(decl_485.binding));
  } else if ((0, _terms.isFunctionDeclaration)(declaration_482) || (0, _terms.isClassDeclaration)(declaration_482)) {
    bindings_483.push(findBindingIdentifierName_470(declaration_482.name));
  }
  let namedExports_484 = bindings_483.map(binding_486 => {
    return new _terms2.default("ExportSpecifier", { name: null, exportedName: binding_486 });
  });
  return new _terms2.default("ExportFrom", { moduleSpecifier: null, namedExports: (0, _immutable.List)(namedExports_484) });
};
const pragmaRegep_472 = /^\s*#\w*/;
class Modules_473 {
  constructor(context_487) {
    this.compiledModules = new Map();
    this.context = context_487;
    this.context.modules = this;
  }
  loadString(str_488) {
    let checkPragma_489 = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    let hasPragma_490 = pragmaRegep_472.test(str_488);
    if (checkPragma_489 && !hasPragma_490) {
      return { isNative: true, body: (0, _immutable.List)() };
    }
    return { isNative: !hasPragma_490, body: new _shiftReader2.default(str_488).read() };
  }
  load(path_491) {
    return this.loadString(this.context.moduleLoader(path_491));
  }
  compile(mod_492, path_493) {
    let stxl_494 = mod_492.body;
    let outScope_495 = (0, _scope.freshScope)("outsideEdge");
    let inScope_496 = (0, _scope.freshScope)(`insideEdge0`);
    let compiler_497 = new _compiler2.default(0, new _env2.default(), new _store2.default(), _.merge(this.context, { currentScope: [outScope_495, inScope_496], cwd: path_493 === "<<entrypoint>>" ? this.context.cwd : (0, _utilsDirname2.default)(path_493) }));
    let terms_498 = compiler_497.compile(stxl_494.map(s_503 => s_503.addScope(outScope_495, this.context.bindings, _syntax.ALL_PHASES).addScope(inScope_496, this.context.bindings, 0)));
    let importEntries_499 = [];
    let exportEntries_500 = [];
    let pragmas_501 = [];
    let filteredTerms_502 = terms_498.reduce((acc_504, t_505) => {
      return _.cond([[_terms.isImport, t_506 => {
        importEntries_499.push(t_506);
        return acc_504;
      }], [_terms.isExport, t_507 => {
        if (t_507.declaration) {
          exportEntries_500.push(convertExport_471(t_507));
          if ((0, _terms.isVariableDeclaration)(t_507.declaration)) {
            return acc_504.concat(new _terms2.default("VariableDeclarationStatement", { declaration: t_507.declaration }));
          }
          return acc_504.concat(t_507.declaration);
        }
        exportEntries_500.push(t_507);
        return acc_504;
      }], [_terms.isPragma, t_508 => {
        pragmas_501.push(t_508);
        return acc_504;
      }], [_.T, t_509 => acc_504.concat(t_509)]])(t_505);
    }, (0, _immutable.List)());
    return new Module_469(path_493, mod_492.isNative, (0, _immutable.List)(importEntries_499), (0, _immutable.List)(exportEntries_500), (0, _immutable.List)(pragmas_501), filteredTerms_502);
  }
  compileEntrypoint(source_510, filename_511) {
    let enforcePragma_512 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let stxl_513 = this.loadString(source_510, false);
    if (enforcePragma_512 && stxl_513.isNative) {
      throw new Error(`Entrypoint ${ filename_511 } must begin with #lang pragma`);
    }
    return this.getAtPhase("<<entrypoint>>", 0, this.context.cwd, stxl_513);
  }
  getAtPhase(rawPath_514, phase_515, cwd_516) {
    let rawStxl_517 = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

    let path_518 = rawPath_514 === "<<entrypoint>>" ? rawPath_514 : this.context.moduleResolver(rawPath_514, cwd_516);
    let mapKey_519 = `${ path_518 }:${ phase_515 }`;
    if (!this.compiledModules.has(mapKey_519)) {
      if (phase_515 === 0) {
        let stxl = rawStxl_517 != null ? rawStxl_517 : this.load(path_518);
        this.compiledModules.set(mapKey_519, this.compile(stxl, path_518));
      } else {
        let rawMod = this.getAtPhase(rawPath_514, 0, cwd_516, rawStxl_517);
        let scope = (0, _scope.freshScope)(`insideEdge${ phase_515 }`);
        this.compiledModules.set(mapKey_519, new Module_469(rawMod.moduleSpecifier, false, rawMod.importEntries.map(term_520 => term_520.addScope(scope, this.context.bindings, phase_515)), rawMod.exportEntries.map(term_521 => term_521.addScope(scope, this.context.bindings, phase_515)), rawMod.pragmas, rawMod.body.map(term_522 => term_522.addScope(scope, this.context.bindings, phase_515))));
      }
    }
    return this.compiledModules.get(mapKey_519);
  }
  has(rawPath_523) {
    let phase_524 = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

    let path_525 = rawPath_523 === "<<entrypoint>>" ? rawPath_523 : this.context.moduleResolver(rawPath_523, this.context.cwd);
    let key_526 = `${ path_525 }:${ phase_524 }`;
    return this.compiledModules.has(key_526) && !this.compiledModules.get(key_526).isNative;
  }
  registerSyntaxDeclaration(term_527, phase_528, store_529) {
    term_527.declarators.forEach(decl_530 => {
      let val_531 = (0, _loadSyntax.evalCompiletimeValue)(decl_530.init.gen(), _.merge(this.context, { phase: phase_528 + 1, store: store_529 }));
      (0, _hygieneUtils.collectBindings)(decl_530.binding).forEach(stx_532 => {
        if (phase_528 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_532.val());
          this.context.bindings.add(stx_532, { binding: newBinding, phase: phase_528, skipDup: false });
        }
        let resolvedName_533 = stx_532.resolve(phase_528);
        store_529.set(resolvedName_533, new _transforms.CompiletimeTransform(val_531));
      });
    });
  }
  registerVariableDeclaration(term_534, phase_535, store_536) {
    term_534.declarators.forEach(decl_537 => {
      (0, _hygieneUtils.collectBindings)(decl_537.binding).forEach(stx_538 => {
        if (phase_535 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_538.val());
          this.context.bindings.add(stx_538, { binding: newBinding, phase: phase_535, skipDup: term_534.kind === "var" });
        }
        let resolvedName_539 = stx_538.resolve(phase_535);
        store_536.set(resolvedName_539, new _transforms.VarBindingTransform(stx_538));
      });
    });
  }
  registerFunctionOrClass(term_540, phase_541, store_542) {
    (0, _hygieneUtils.collectBindings)(term_540.name).forEach(stx_543 => {
      if (phase_541 !== 0) {
        let newBinding = (0, _symbol.gensym)(stx_543.val());
        this.context.bindings.add(stx_543, { binding: newBinding, phase: phase_541, skipDup: false });
      }
      let resolvedName_544 = stx_543.resolve(phase_541);
      store_542.set(resolvedName_544, new _transforms.VarBindingTransform(stx_543));
    });
  }
  visit(mod_545, phase_546, store_547) {
    mod_545.body.forEach(term_548 => {
      if ((0, _terms.isSyntaxDeclarationStatement)(term_548)) {
        this.registerSyntaxDeclaration(term_548.declaration, phase_546, store_547);
      }
    });
    return store_547;
  }
  invoke(mod_549, phase_550, store_551) {
    let body_552 = mod_549.body.filter(_.complement(_terms.isCompiletimeStatement)).map(term_554 => {
      term_554 = term_554.gen();
      if ((0, _terms.isVariableDeclarationStatement)(term_554)) {
        this.registerVariableDeclaration(term_554.declaration, phase_550, store_551);
      } else if ((0, _terms.isFunctionDeclaration)(term_554)) {
        this.registerFunctionOrClass(term_554, phase_550, store_551);
      }
      return term_554;
    });
    let exportsObj_553 = (0, _loadSyntax.evalRuntimeValues)(body_552, _.merge(this.context, { store: store_551, phase: phase_550 }));
    return store_551;
  }
}
exports.Module = Module_469;
exports.Modules = Modules_473;
//# sourceMappingURL=data:application/json;base64,